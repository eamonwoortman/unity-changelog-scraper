# Define transforms with improved regex
transformers = {
    'category_types': [
        { "pattern": r"(?i)\basset\s(import.*|pipeline|management)\b|^importer|^importing", "replacement": "Asset Importer" },
        { "pattern": r"(?i)^api\s?updater$", "replacement": "API Updater" },
        { "pattern": r"(?i)^assets?\sloading$", "replacement": "Asset Loading" },
        { "pattern": r"(?i)^asset\s?database$", "replacement": "Asset Database" },
        { "pattern": r"(?i)^asset\s?bundles?$", "replacement": "Asset Bundles" },
        { "pattern": r"(?i)^apple\s?tv$", "replacement": "Apple TV" },
        { "pattern": r"(?i)^blackberry$", "replacement": "BlackBerry" },
        { "pattern": r"(?i)^bug\s?reporter$", "replacement": "Bug Reporter" },
        { "pattern": r"(?i)^build\s?(pipeline|management|player|system)?$", "replacement": "Build Pipeline" },
        { "pattern": r"(?i)^cache\s?server$", "replacement": "Cache Server" },
        { "pattern": r"(?i)^cloud\s?services?$", "replacement": "Cloud Services" },
        { "pattern": r"(?i)^code\s?editors?$", "replacement": "Code Editors" },
        { "pattern": r"(?i)^collab(orate|oration)?$", "replacement": "Collaborate" },
        { "pattern": r"(?i)^deployment(\smanagement)?$", "replacement": "Deployment Management" },
        { "pattern": r"(?i)^(d3d|direct3d\s?11|dx11)$", "replacement": "DirectX 11" },
        { "pattern": r"(?i)^(d3d12|directx\s?12|dx12)$", "replacement": "DirectX 12" },
        { "pattern": r"(?i)^d3d9$", "replacement": "DirectX 9" },
        { "pattern": r"(?i)^editor\s?analytics$", "replacement": "Editor Analytics" },
        { "pattern": r"(?i)^frame\s?debugger$", "replacement": "Frame Debugger" },
        { "pattern": r"(?i)^home(\s?window)?$", "replacement": "Home Window" },
        { "pattern": r"(?i)^input(\s?system)?$", "replacement": "Input System" },
        { "pattern": r"(?i)^internal$", "replacement": "Internal" },
        { "pattern": r"(?i)^inspector(\s?(framework|functionality))?$", "replacement": "Inspector Framework" },
        { "pattern": r"(?i)^il2cpp$", "replacement": "IL2CPP" },
        { "pattern": r"(?i)^install(ers?)?$", "replacement": "Installer" },
        { "pattern": r"(?i)^memory(\s?profiler)?$", "replacement": "Memory Profiler" },
        { "pattern": r"(?i)^macos$", "replacement": "MacOS" },
        { "pattern": r"(?i)^os\s?x$", "replacement": "OSX" },
        { "pattern": r"(?i)^os\s?x\s(editor)$", "replacement": "OSX Editor" },
        { "pattern": r"(?i)^os\s?x\s(standalone|player)?$", "replacement": "OSX Standalone" },
        { "pattern": r"(?i)^opengl\score$", "replacement": "OpenGL Core" },
        { "pattern": r"(?i)^opengl\s?es$", "replacement": "OpenGL ES" },
        { "pattern": r"(?i)^package\s?manager|packman$", "replacement": "Package Manager" },
        { "pattern": r"(?i)^particle system|particles$", "replacement": "Particle System" },
        { "pattern": r"(?i)^performance reporting(\sservice)?$", "replacement": "Performance Reporting" },
        { "pattern": r"(?i)^physics\s?2d|phyics2d|physic\s2d$", "replacement": "Physics 2D" },
        { "pattern": r"(?i)^prefabs?$", "replacement": "Prefabs" },
        { "pattern": r"(?i)^ps4$", "replacement": "PS4" },
        { "pattern": r"(?i)^ugui$", "replacement": "UGUI" },
        { "pattern": r"(?i)^samsung\s?tv$", "replacement": "Samsung TV" },
        { "pattern": r"(?i)^shadergraph$", "replacement": "ShaderGraph" },
        { "pattern": r"(?i)^scene\s?manager$", "replacement": "Scene Manager" },
        { "pattern": r"(?i)^scene\s?management$", "replacement": "Scene Management" },
        { "pattern": r"(?i)^texture\s?importer$", "replacement": "Texture Importer" },
        { "pattern": r"(?i)^unet$", "replacement": "UNET" },
        { "pattern": r"(?i)^unity test runner|testing$", "replacement": "Unity Test Runner" },
        { "pattern": r"(?i)^universal\swindows\sapps$", "replacement": "Universal Windows Apps" },
        { "pattern": r"(?i)^version\s?control$", "replacement": "Version Control" },
        { "pattern": r"(?i)^visual\s?effects?|vfx(\sgraph)?$", "replacement": "VFX" },
        { "pattern": r"(?i)^visual\s?studio(\sintegration)?$", "replacement": "Code Editors" },
        { "pattern": r"(?i)^ios$", "replacement": "IOS" },
        { "pattern": r"(?i)^xr$", "replacement": "XR" },
        { "pattern": r"(?i)^xbox\s?one$", "replacement": "Xbox One" },
    ]
}

# main options dict
options = {
    'transformers': transformers,
}
